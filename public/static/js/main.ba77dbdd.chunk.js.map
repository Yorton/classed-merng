{"version":3,"sources":["serviceWorker.js","context/auth.js","util/AuthRoute.js","components/MenuBar.js","util/MyPopup.js","components/LikeButton.js","util/graphql.js","components/DeleteButton.js","components/PostCard.js","util/hooks.js","components/PostForm.js","pages/Home.js","pages/Login.js","pages/Register.js","pages/SinglePost.js","App.js","ApolloProvider.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","useReducer","dispatch","Provider","value","setItem","token","AuthRoute","Component","component","rest","useContext","console","log","render","to","MenuBar","pathname","path","substr","useState","activeItem","setActiveItem","handleItemClick","e","name","Menu","pointing","secondary","size","color","Item","username","active","as","Link","position","onClick","MyPopup","content","children","Popup","inverted","trigger","LIKE_POST_MUTATION","gql","LikeButton","post","id","likeCount","likes","liked","setLiked","useEffect","find","like","useMutation","variables","postId","likePost","likeButton","Button","Icon","basic","labelPosition","Label","FETCH_POSTS_QUERY","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","DeleteButton","commentId","callback","confirmOpen","setConfirmOpen","mutation","update","proxy","data","readQuery","query","getPosts","filter","p","writeQuery","deletePostOrMutation","floated","style","margin","Confirm","open","onCancel","onConfirm","PostCard","body","createdAt","commentCount","Card","fluid","Content","Image","src","Header","Meta","monent","fromNow","Description","extra","history","push","useForm","values","setValues","onChange","event","target","onSubmit","preventDefault","CREATE_POST_MUTATION","PostForm","createPost","result","error","Form","Field","Input","placeholder","className","marginBottom","graphQLErrors","message","Home","useQuery","loading","Grid","columns","Row","Column","Transition","Group","map","key","LOGIN_USER","Login","context","errors","setErrors","loginUser","password","_","onError","err","extensions","noValidate","label","primary","Object","keys","length","REGISTER_USER","Register","addUser","email","confirmPassword","register","SUBMIT_COMMENT_MUTATION","FETCH_POST_QUERY","SinglePost","postMarkup","params","commentInputRef","useRef","comment","setComment","getPost","current","blur","submitComment","comments","width","moment","CardContent","ref","disabled","trim","App","Container","exact","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","ApolloProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.ba77dbdd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useReducer, createContext} from 'react';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nconst initialState = {\r\n    user: null\r\n};\r\n\r\nif (localStorage.getItem('jwtToken')){\r\n\r\n    const decodedToken = jwtDecode(localStorage.getItem('jwtToken'));\r\n    if (decodedToken.exp * 1000 < Date.now()){//token expired\r\n        localStorage.removeItem('jwtToken');\r\n    }else{\r\n        initialState.user = decodedToken;\r\n    }\r\n}\r\n\r\n//const token = localStorage.getItem('jwtToken');\r\n//console.log(\"auth token\", token);\r\n\r\nconst AuthContext = createContext({\r\n    user: null,\r\n    login: (userData) => {},\r\n    logout: () => {}\r\n    \r\n    // ,\r\n    // headers: {\r\n    //     Authorization: token ? `Bearer ${token}` : ''\r\n    // }\r\n});\r\n\r\nfunction authReducer(state, action){\r\n    switch (action.type){\r\n        case 'LOGIN':\r\n\r\n            return {\r\n                ...state,\r\n                user: action.payload\r\n            };\r\n        case 'LOGOUT':\r\n            \r\n            return {\r\n                ...state,\r\n                user: null\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction AuthProvider(props){\r\n\r\n    const [state, dispatch] = useReducer(authReducer, {user: initialState});\r\n\r\n    function login(userData){\r\n\r\n        localStorage.setItem('jwtToken', userData.token);\r\n\r\n        dispatch({\r\n            type: 'LOGIN',\r\n            payload: userData\r\n        });\r\n    }\r\n\r\n    function logout(){\r\n        \r\n        localStorage.removeItem('jwtToken');\r\n\r\n        dispatch({\r\n            type: 'LOGOUT'\r\n        });\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider \r\n            value={{user: state.user, login, logout}}\r\n            {...props}\r\n        />\r\n    );\r\n}\r\n\r\nexport {AuthContext, AuthProvider}","import React, { userContext, useState, useContext } from 'react';\r\nimport {Route, Redirect} from 'react-router-dom';\r\n\r\nimport {AuthContext} from '../context/auth';\r\n\r\nfunction AuthRoute({component: Component, ...rest}){\r\n\r\n    const {user} = useContext(AuthContext);\r\n\r\n    console.log(\"AuthRoute\", user);\r\n\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render = {\r\n                props => user ? <Redirect to=\"/\" /> : <Component {...props} />\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default AuthRoute;\r\n\r\n","import React, { useContext, useState } from 'react';\r\nimport { Menu } from 'semantic-ui-react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport {AuthContext} from '../context/auth';\r\n\r\nfunction MenuBar() {\r\n\r\n    //const context = useContext(AuthContext);\r\n    const {user, logout} = useContext(AuthContext);\r\n\r\n    const pathname = window.location.pathname;\r\n    // /login\r\n    const path = pathname === '/' ? 'home' : pathname.substr(1);\r\n\r\n  //state = { activeItem: 'home' }\r\n  const [activeItem, setActiveItem] = useState(path);\r\n\r\n  //handleItemClick = (e, { name }) => this.setState({ activeItem: name })\r\n  const handleItemClick = (e, { name }) => setActiveItem(name);\r\n\r\n  const menuBar = user \r\n  ?\r\n  (\r\n    <Menu pointing secondary size=\"massive\" color=\"teal\">\r\n          <Menu.Item\r\n            name={user.username}\r\n            active\r\n            as={Link}\r\n            to='/'\r\n          />\r\n          <Menu.Menu position='right'>\r\n            <Menu.Item\r\n              name='logout'\r\n              onClick={logout}\r\n            />\r\n          </Menu.Menu>\r\n        </Menu>\r\n  )\r\n  :\r\n  (\r\n    <Menu pointing secondary size=\"massive\" color=\"teal\">\r\n          <Menu.Item\r\n            name='home'\r\n            active={activeItem === 'home'}\r\n            onClick={handleItemClick}\r\n            as={Link}\r\n            to='/'\r\n          />\r\n          <Menu.Menu position='right'>\r\n            <Menu.Item\r\n              name='login'\r\n              active={activeItem === 'login'}\r\n              onClick={handleItemClick}\r\n              as={Link}\r\n              to='/login'\r\n            />\r\n            <Menu.Item\r\n              name='register'\r\n              active={activeItem === 'register'}\r\n              onClick={handleItemClick}\r\n              as={Link}\r\n              to='/register'\r\n            />\r\n          </Menu.Menu>\r\n        </Menu>\r\n  )\r\n\r\n\r\n    return menuBar;\r\n    \r\n    // (\r\n\r\n    //     <Menu pointing secondary size=\"massive\" color=\"teal\">\r\n    //       <Menu.Item\r\n    //         name='home'\r\n    //         active={activeItem === 'home'}\r\n    //         onClick={handleItemClick}\r\n    //         as={Link}\r\n    //         to='/'\r\n    //       />\r\n    //       <Menu.Menu position='right'>\r\n    //         <Menu.Item\r\n    //           name='login'\r\n    //           active={activeItem === 'login'}\r\n    //           onClick={handleItemClick}\r\n    //           as={Link}\r\n    //           to='/login'\r\n    //         />\r\n    //         <Menu.Item\r\n    //           name='register'\r\n    //           active={activeItem === 'register'}\r\n    //           onClick={handleItemClick}\r\n    //           as={Link}\r\n    //           to='/register'\r\n    //         />\r\n    //       </Menu.Menu>\r\n    //     </Menu>\r\n\r\n    // )\r\n  \r\n}\r\n\r\nexport default MenuBar;\r\n","import {Popup} from 'semantic-ui-react';\r\nimport React from 'react';\r\n\r\nfunction MyPopup({content, children}){\r\n    return <Popup inverted content={content} trigger={children} />;\r\n}\r\n\r\nexport default MyPopup;","import React, {useEffect, useState} from 'react';\r\nimport gql from 'graphql-tag';\r\nimport {Link} from 'react-router-dom';\r\nimport {useMutation} from '@apollo/react-hooks';\r\nimport {Button, Icon, Label} from 'semantic-ui-react';\r\n\r\nimport MyPopup from '../util/MyPopup';\r\n\r\nfunction LikeButton({user, post:{id, likeCount, likes}}){\r\n\r\n    const [liked, setLiked] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n        if (user &&　likes.find(like => like.username === user.username)){\r\n            setLiked(true);\r\n        }else{\r\n            setLiked(false);\r\n        }\r\n    }, [user, likes]);//depend on user, likes\r\n\r\n    const [likePost] = useMutation(LIKE_POST_MUTATION, {\r\n        variables: {postId : id}\r\n    });\r\n\r\n    const likeButton = user ? (\r\n        liked ? (\r\n            <Button color='teal'>\r\n                <Icon name='heart' />\r\n            </Button>\r\n        ):(\r\n            <Button color='teal' basic>\r\n                <Icon name='heart' />\r\n            </Button>\r\n        )\r\n    ):(\r\n        <Button as={Link} to=\"/login\" color='teal' basic>\r\n            <Icon name='heart' />\r\n        </Button>\r\n    )\r\n\r\n    return (\r\n        <Button as='div' labelPosition='right' onClick={likePost}>\r\n\r\n            <MyPopup content={liked ? 'Unlike' : 'Like'}>\r\n                {likeButton}\r\n            </MyPopup>\r\n           \r\n            <Label basic color='teal' pointing='left'>\r\n                {likeCount}\r\n            </Label>\r\n        </Button>\r\n    )\r\n}\r\n\r\nconst LIKE_POST_MUTATION = gql`\r\n    mutation likePost($postId: ID!){\r\n        likePost(postId: $postId){\r\n            id\r\n            likes{\r\n                id\r\n                username\r\n            }\r\n            likeCount\r\n        }\r\n    }\r\n`;\r\n\r\nexport default LikeButton;","import gql from 'graphql-tag';\r\n\r\nexport const FETCH_POSTS_QUERY = gql`\r\n{\r\n    getPosts{\r\n        id \r\n        body \r\n        createdAt \r\n        username \r\n        likeCount\r\n        likes{\r\n            username\r\n        }\r\n        commentCount\r\n        comments{\r\n            id \r\n            username \r\n            createdAt \r\n            body\r\n        }\r\n    }\r\n}    \r\n`;","import React, {useState} from 'react';\r\nimport gql from 'graphql-tag';\r\nimport {useMutation} from '@apollo/react-hooks';\r\nimport {Button, Confirm, Icon} from 'semantic-ui-react';\r\n\r\nimport {FETCH_POSTS_QUERY} from '../util/graphql';\r\n\r\nimport MyPopup from '../util/MyPopup';\r\n\r\nfunction DeleteButton({postId, commentId, callback}){\r\n\r\n    const [confirmOpen, setConfirmOpen] = useState(false);\r\n\r\n    const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION;\r\n\r\n    const [deletePostOrMutation] = useMutation(mutation, {\r\n        \r\n        update(proxy){\r\n            setConfirmOpen(false);\r\n\r\n            //TODO: remove post from cache\r\n            if (!commentId){\r\n                const data = proxy.readQuery({\r\n                    query: FETCH_POSTS_QUERY\r\n                });\r\n    \r\n                data.getPosts =  data.getPosts.filter(p => p.id !== postId);\r\n    \r\n                proxy.writeQuery({\r\n                    query: FETCH_POSTS_QUERY, data\r\n                });\r\n            }\r\n     \r\n            if (callback) callback();\r\n        }r\n        variables: {\r\n            postId,\r\n            commentId\r\n        }\r\n    });\r\n\r\n\r\n   return (\r\n        <>\r\n            <MyPopup content={commentId ? 'Delete comment' : 'Delete post'} >\r\n                <Button as=\"div\" color=\"red\" onClick={()=> setConfirmOpen(true)} floated=\"right\">\r\n                    <Icon name=\"trash\" style={{margin : 0}}/>\r\n                </Button>\r\n            </MyPopup>\r\n            <Confirm\r\n                open={confirmOpen}\r\n                onCancel={() => {setConfirmOpen(false)}}\r\n                onConfirm={deletePostOrMutation}\r\n            />\r\n        </>\r\n   )\r\n}\r\n\r\nconst DELETE_POST_MUTATION = gql`\r\n    mutation deletePost($postId: ID!){\r\n        deletePost(postId: $postId)\r\n      \r\n    }\r\n`;\r\n\r\nconst DELETE_COMMENT_MUTATION = gql`\r\n    mutation deleteComment($postId: ID!, $commentId: ID!){\r\n        deleteComment(postId: $postId, commentId: $commentId){\r\n            id\r\n            comments{\r\n                id\r\n                username\r\n                createdAt\r\n                body\r\n            }\r\n            commentCount\r\n        }\r\n    }\r\n`;\r\n\r\nexport default DeleteButton;","import React, { useState, useContext } from 'react';\r\nimport {Button, Card, Icon, Label, Image } from 'semantic-ui-react';\r\nimport {Link} from 'react-router-dom';\r\nimport monent from 'moment';\r\n\r\nimport {AuthContext} from '../context/auth';\r\nimport LikeButton from './LikeButton';\r\nimport DeleteButton from './DeleteButton';\r\n\r\nimport MyPopup from '../util/MyPopup';\r\n\r\nfunction PostCard({post:{body, createdAt, id, username, likeCount, commentCount, likes}, props}) {\r\n\r\n    const {user} = useContext(AuthContext);\r\n\r\n    function deletePostCallback(){\r\n\r\n        props.history.push('/');\r\n    }\r\n\r\n  \r\n    return (\r\n\r\n        <Card fluid>\r\n            <Card.Content>\r\n                <Image\r\n                floated='right'\r\n                size='mini'\r\n                src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                />\r\n                <Card.Header>{username}</Card.Header>\r\n                <Card.Meta as={Link} to={`/posts/${id}`}>{monent(createdAt).fromNow(true)}</Card.Meta>\r\n                <Card.Description>{body}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <LikeButton user={user} post={{id, likes, likeCount} }/>\r\n                {\r\n                /*\r\n                <Button as='div' labelPosition='right' onClick={likePost}>\r\n                    <Button color='teal' basic>\r\n                        <Icon name='heart' />\r\n                    </Button>\r\n                    <Label basic color='teal' pointing='left'>\r\n                        {likeCount}\r\n                    </Label>\r\n                </Button>\r\n                */\r\n                }\r\n\r\n                <MyPopup content=\"Comment on post\" >\r\n                    <Button labelPosition='right' as={Link} to={`/posts/${id}`}>\r\n                        <Button color='blue' basic>\r\n                            <Icon name='comments' />\r\n                        </Button>\r\n                        <Label basic color='blue' pointing='left'>\r\n                            {commentCount}\r\n                        </Label>\r\n                    </Button>\r\n                </MyPopup>\r\n\r\n                {\r\n                    user && user.username === username && <DeleteButton postId={id} callback={deletePostCallback}/>\r\n                     \r\n                        /*\r\n                        <Button as=\"div\" color=\"red\" onClick={()=> console.log('Delete post')} floated=\"right\">\r\n                            <Icon name=\"trash\" style={{margin : 0}}/>\r\n                        </Button>\r\n                        */\r\n                        \r\n                }\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n  \r\n}\r\n\r\nexport default PostCard;\r\n","import {useState} from 'react';\r\n\r\nexport const useForm = (callback, initialState={}) => {\r\n\r\n    const [values, setValues] = useState(initialState);\r\n\r\n    const onChange = (event) => {\r\n        setValues({...values, [event.target.name]: event.target.value});\r\n    }\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        callback();\r\n    }\r\n\r\n    return{\r\n        onChange,\r\n        onSubmit,\r\n        values\r\n    }\r\n}","import React from 'react';\r\nimport {Button, Form} from 'semantic-ui-react';\r\nimport gql from 'graphql-tag';\r\nimport {useMutation} from '@apollo/react-hooks';\r\n\r\nimport {useForm} from '../util/hooks';\r\nimport {FETCH_POSTS_QUERY} from '../util/graphql';\r\n\r\nfunction PostForm({props}){\r\n\r\n    const {values, onChange, onSubmit} = useForm(createPostCallback, {\r\n        body: ''\r\n    });\r\n\r\n    const [createPost, {error}] = useMutation(CREATE_POST_MUTATION,{\r\n        \r\n        update(proxy, result){//use proxy for cache\r\n        \r\n            const data = proxy.readQuery({\r\n                query: FETCH_POSTS_QUERY\r\n            });\r\n\r\n            data.getPosts = [result.data.createPost, ...data.getPosts];\r\n\r\n            proxy.writeQuery({\r\n                query: FETCH_POSTS_QUERY, data\r\n            });\r\n\r\n            values.body = '';\r\n\r\n            props.history.push('/');\r\n        },\r\n        variables: values\r\n    });\r\n\r\n    function createPostCallback(){\r\n        createPost();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={onSubmit}>\r\n                <h2>Create a post:</h2>\r\n                <Form.Field>\r\n                    <Form.Input \r\n                        placeholder=\"Hi world\"\r\n                        name=\"body\"\r\n                        onChange={onChange}\r\n                        value={values.body}\r\n                        error={error ? true : false}\r\n                    />\r\n                    <Button type=\"submit\" color=\"teal\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Field>\r\n            </Form>\r\n            {\r\n                error && (\r\n                    <div className=\"ui error message\" style={{marginBottom: 20}}>\r\n                        <ul className=\"list\">\r\n                            <li>{error.graphQLErrors[0].message}</li>\r\n                        </ul> \r\n                    </div>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst CREATE_POST_MUTATION = gql`\r\n    mutation createPost($body: String!){\r\n        createPost(body: $body){\r\n            id\r\n            body\r\n            createdAt\r\n            username\r\n            likes{\r\n                id\r\n                username\r\n                createdAt\r\n            }\r\n            likeCount\r\n            comments{\r\n                id\r\n                body\r\n                username\r\n                createdAt\r\n            }\r\n            commentCount\r\n        }\r\n    }\r\n`;\r\n\r\nexport default PostForm;","import React, {useContext} from 'react';\r\nimport {useQuery} from '@apollo/react-hooks';\r\n//import gql from 'graphql-tag';\r\nimport {Grid, Transition} from 'semantic-ui-react';\r\n\r\nimport {AuthContext} from '../context/auth';\r\n\r\nimport PostCard from '../components/PostCard';\r\nimport PostForm from '../components/PostForm';\r\nimport {FETCH_POSTS_QUERY} from '../util/graphql';\r\n\r\n\r\n function Home(props){\r\n\r\n    const {user} = useContext(AuthContext);\r\n\r\n//without = {} getPosts would be undefined\r\n//    const {\r\n//             loading, \r\n//             data: {getPosts: posts} = {}\r\n//          } = useQuery(FETCH_POSTS_QUERY);\r\n\r\n//          console.log(\"home post\",posts);\r\n\r\nconst {\r\n    loading, \r\n    data\r\n } = useQuery(FETCH_POSTS_QUERY);\r\n\r\n  console.log(\"home\", data) ;\r\n\r\n    return (\r\n\r\n        //data === undefined ? <div/> :\r\n       // posts === undefined ? <div/> :\r\n\r\n        //(\r\n        <Grid columns={3}>\r\n            <Grid.Row className=\"page-title\">\r\n               <h1>Recent Posts</h1>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n                {\r\n                    user && (\r\n                        <Grid.Column>\r\n                            <PostForm props={props} />\r\n                        </Grid.Column>\r\n                    )\r\n                }\r\n\r\n\r\n                {\r\n                    loading \r\n                    ? \r\n                    (\r\n                        <h1>Loading posts...</h1>\r\n                    )\r\n                    :\r\n                    (\r\n                        <Transition.Group>\r\n                            {\r\n             \r\n                                data && data.getPosts && data.getPosts.map(post => (\r\n                                //posts && posts.map(post => (\r\n                                <Grid.Column key={post.id} style={{marginBottom: 20}}>\r\n                                    <PostCard post={post} props={props} />\r\n                                </Grid.Column>\r\n                                ))\r\n                               \r\n                            }\r\n                        </Transition.Group>\r\n                    )\r\n                }\r\n\r\n                \r\n            </Grid.Row>\r\n        </Grid>\r\n       // )\r\n    )\r\n}\r\n\r\n// const FETCH_POSTS_QUERY = gql`\r\n// {\r\n//     getPosts{\r\n//         id \r\n//         body \r\n//         createdAt \r\n//         username \r\n//         likeCount\r\n//         likes{\r\n//             username\r\n//         }\r\n//         commentCount\r\n//         comments{\r\n//             id \r\n//             username \r\n//             createdAt \r\n//             body\r\n//         }\r\n//     }\r\n// }    \r\n// `;\r\n\r\nexport default Home;","import React, { userContext, useState, useContext } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport {useMutation} from '@apollo/react-hooks';\r\nimport {Form, Button} from 'semantic-ui-react';\r\n\r\nimport {AuthContext} from '../context/auth';\r\nimport { useForm } from '../util/hooks';\r\n\r\nfunction Login(props){\r\n\r\n    const context = useContext(AuthContext);\r\n\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const {onChange, onSubmit, values} = useForm(loginUserCallback,{\r\n        username: '',\r\n        password: ''\r\n    });\r\n\r\n    const [loginUser, {loading}] = useMutation(LOGIN_USER,{\r\n\r\n        update(_, result){//update(proxy, result)\r\n         \r\n            console.log(\"login\", result.data.login);\r\n\r\n            context.login(result.data.login);\r\n        \r\n            props.history.push('/'); //redirect to home page\r\n        },\r\n        \r\n \r\n        // update(_, {data: {login: userData}}){//update(proxy, result)\r\n\r\n        //     context.login(userData);\r\n\r\n        //     props.history.push('/'); //redirect to home page\r\n        // },\r\n        onError(err){\r\n            //console.log(err.graphQLErrors[0].extensions.errors);\r\n            setErrors(err.graphQLErrors[0].extensions.errors);\r\n        },\r\n        variables: values\r\n    });\r\n\r\n   function loginUserCallback(){\r\n        loginUser();\r\n   }\r\n\r\n   \r\n\r\n    return (\r\n        <div className=\"form-container\">\r\n            <form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\r\n                <h1>Login page</h1>\r\n                <Form.Input\r\n                    label=\"Username\"\r\n                    placeholder=\"Username...\"\r\n                    name=\"username\"\r\n                    type=\"text\"\r\n                    value={values.username}\r\n                    error={errors.username ? true : false}\r\n                    onChange={onChange}\r\n                />\r\n                <Form.Input\r\n                    label=\"Password\"\r\n                    placeholder=\"Password...\"\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    value={values.password}\r\n                    error={errors.password ? true : false}\r\n                    onChange={onChange}\r\n                />\r\n                 <div className=\"field\">\r\n                    <Button type=\"submit\" primary>\r\n                        Login\r\n                    </Button>\r\n                 </div>\r\n               \r\n            </form>\r\n            {\r\n                Object.keys(errors).length > 0 && (\r\n                    <div className=\"ui error message\">\r\n                        <ul className=\"list\">\r\n                            {\r\n                                Object.values(errors).map(value => (\r\n                                    <li key={value}>{value}</li>\r\n                                ))\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst LOGIN_USER = gql`\r\n    mutation login(\r\n        $username: String!\r\n        $password: String!\r\n    ){\r\n        login(\r\n                username: $username\r\n                password: $password\r\n        ){\r\n            id\r\n            email\r\n            username\r\n            createdAt\r\n            token\r\n        }\r\n    }\r\n`;\r\n\r\nexport default Login;\r\n","import React, { useContext, useState } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport {useMutation} from '@apollo/react-hooks';\r\nimport {Form, Button} from 'semantic-ui-react';\r\n\r\nimport {AuthContext} from '../context/auth';\r\nimport { useForm } from '../util/hooks';\r\n\r\nfunction Register(props){\r\n\r\n    const context = useContext(AuthContext);\r\n\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const {onChange, onSubmit, values} = useForm(registerUser,{\r\n        username: '',\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: ''\r\n    });\r\n\r\n\r\n    // const [values, setValues] = useState({\r\n    //     username: '',\r\n    //     email: '',\r\n    //     password: '',\r\n    //     confirmPassword: ''\r\n    // });\r\n\r\n    // const onChange = (event) => {\r\n    //     setValues({...values, [event.target.name]: event.target.value});\r\n    // }\r\n\r\n    const [addUser, {loading}] = useMutation(REGISTER_USER,{\r\n        \r\n        //update(_, result){//update(proxy, result)\r\n        update(_, {data: {register: userData}}){//update(proxy, result)\r\n\r\n            //context.login(result.data.register);\r\n            context.login(userData);\r\n\r\n            props.history.push('/'); //redirect to home page\r\n        },\r\n        onError(err){\r\n            //console.log(err.graphQLErrors[0].extensions.errors);\r\n            setErrors(err.graphQLErrors[0].extensions.errors);\r\n        },\r\n        variables: values\r\n    });\r\n\r\n    function registerUser(){\r\n        addUser();\r\n    }\r\n\r\n    // const onSubmit = (event) => {\r\n    //     event.preventDefault();\r\n\r\n    //     addUser();\r\n    // }\r\n\r\n   \r\n\r\n    return (\r\n        <div className=\"form-container\">\r\n            <form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\r\n                <h1>Register page</h1>\r\n                <Form.Input\r\n                    label=\"Username\"\r\n                    placeholder=\"Username...\"\r\n                    name=\"username\"\r\n                    type=\"text\"\r\n                    value={values.username}\r\n                    error={errors.username ? true : false}\r\n                    onChange={onChange}\r\n                />\r\n                <Form.Input\r\n                    label=\"Email\"\r\n                    placeholder=\"Email...\"\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    value={values.email}\r\n                    error={errors.email ? true : false}\r\n                    onChange={onChange}\r\n                />\r\n                <Form.Input\r\n                    label=\"Password\"\r\n                    placeholder=\"Password...\"\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    value={values.password}\r\n                    error={errors.password ? true : false}\r\n                    onChange={onChange}\r\n                />\r\n                <Form.Input\r\n                    label=\"Confirm Password\"\r\n                    placeholder=\"Confirm Password...\"\r\n                    name=\"confirmPassword\"\r\n                    type=\"password\"\r\n                    value={values.confirmPassword}\r\n                    error={errors.confirmPassword ? true : false}\r\n                    onChange={onChange}\r\n                />\r\n\r\n                <div className=\"field\">\r\n                    <Button type=\"submit\" primary>\r\n                        Register\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n            {\r\n                Object.keys(errors).length > 0 && (\r\n                    <div className=\"ui error message\">\r\n                        <ul className=\"list\">\r\n                            {\r\n                                Object.values(errors).map(value => (\r\n                                    <li key={value}>{value}</li>\r\n                                ))\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst REGISTER_USER = gql`\r\n    mutation register(\r\n        $username: String!\r\n        $email: String!\r\n        $password: String!\r\n        $confirmPassword: String!\r\n    ){\r\n        register(\r\n            registerInput: {\r\n                username: $username\r\n                email: $email\r\n                password: $password\r\n                confirmPassword: $confirmPassword\r\n            }\r\n        ){\r\n            id\r\n            email\r\n            username\r\n            createdAt\r\n            token\r\n        }\r\n    }\r\n`;\r\n\r\nexport default Register;\r\n","import React, {useContext, useState, useRef} from 'react';\r\nimport {useQuery, useMutation} from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\nimport moment from 'moment';\r\n\r\nimport {AuthContext} from '../context/auth';\r\n\r\nimport {Card, Grid, Image, Button, Label, Icon, Form, CardContent} from 'semantic-ui-react';\r\nimport LikeButton from '../components/LikeButton';\r\nimport DeleteButton from '../components/DeleteButton';\r\n\r\nimport MyPopup from '../util/MyPopup';\r\n\r\n\r\n function SinglePost(props){\r\n\r\n    const postId = props.match.params.postId;\r\n    //console.log(postId);\r\n\r\n    const {user} = useContext(AuthContext);\r\n\r\n    const commentInputRef = useRef(null);\r\n\r\n    const [comment, setComment] = useState('');\r\n\r\n    //without = {} getPost would be undefined\r\n    const {data: {getPost} = {}} = useQuery(FETCH_POST_QUERY, {\r\n        variables: {postId}\r\n    });\r\n\r\n\r\n    const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\r\n        update(){\r\n            setComment('');\r\n            commentInputRef.current.blur();\r\n        },\r\n        variables:{\r\n            postId,\r\n            body: comment\r\n        }\r\n    });\r\n\r\n    function deletePostCallback(){\r\n\r\n        props.history.push('/');\r\n    }\r\n\r\n    let postMarkup;\r\n    if (!getPost){\r\n        postMarkup = (<p>Loading post...</p>)\r\n    }else{\r\n        const {id, body, createdAt, username, comments, likes, commentCount, likeCount} = getPost;\r\n\r\n        postMarkup = (\r\n            <Grid columns={3}>\r\n                <Grid.Row>\r\n                    <Grid.Column width={2}>\r\n                        <Image\r\n                            floated='right'\r\n                            size='small'\r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                        />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={10}>\r\n                        <Card fluid>\r\n                            <Card.Content>\r\n                                <Card.Header>{username}</Card.Header>\r\n                                <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\r\n                                <Card.Description>{body}</Card.Description>\r\n                            </Card.Content>\r\n                            <hr/>\r\n                            <Card.Content extra>\r\n                                <LikeButton user={user} post={{id, likeCount, likes}}/>\r\n\r\n                                <MyPopup content=\"Comment on post\">\r\n                                    <Button \r\n                                        as =\"div\"\r\n                                        labelPosition=\"right\"\r\n                                        onClick={()=>{console.log('Comment on post')}}\r\n                                    >\r\n                                        <Button basic color=\"blue\">\r\n                                            <Icon name=\"comments\"/>\r\n                                        </Button>\r\n                                        <Label basic color=\"blue\" pointing=\"left\">\r\n                                            {commentCount}\r\n                                        </Label>\r\n                                    </Button>\r\n                                </MyPopup>\r\n  \r\n                                {user && user.username === username && (\r\n                                    <DeleteButton postId={id} callback={deletePostCallback}/>\r\n                                )}\r\n                            </Card.Content>\r\n                        </Card>\r\n                        {\r\n                            user && (\r\n                                <Card fluid>\r\n                                    <CardContent>\r\n                                        <p>Post a comment</p>\r\n                                        <Form>\r\n                                            <div className=\"ui action input fluid\">\r\n                                                <input \r\n                                                    type=\"text\"\r\n                                                    placeholder=\"Comment...\"\r\n                                                    name=\"comment\"\r\n                                                    value={comment}\r\n                                                    onChange={event => setComment(event.target.value)}\r\n                                                    ref={commentInputRef}\r\n                                                />\r\n                                                <button type=\"submit\"\r\n                                                className=\"ui button teal\"\r\n                                                disabled={comment.trim() === ''}\r\n                                                onClick={submitComment}>\r\n                                                    Submit\r\n                                                </button>\r\n                                            </div>\r\n                                        </Form>\r\n                                    </CardContent>\r\n                                </Card>\r\n                            )\r\n                        }\r\n                        {\r\n                            comments.map(comment => (\r\n                                <Card fluid key={comment.id}>\r\n                                    <CardContent>\r\n                                        {user && user.username === comment.username && (\r\n                                            <DeleteButton postId={id} commentId={comment.id}/>\r\n                                        )}\r\n                                        <Card.Header>{comment.username}</Card.Header>\r\n                                        <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\r\n                                        <Card.Description>{comment.body}</Card.Description>\r\n                                    </CardContent>\r\n                                </Card>\r\n                            ))\r\n                        }\r\n                    </Grid.Column>\r\n                  \r\n                </Grid.Row>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n\r\n    return postMarkup;\r\n}\r\n\r\nconst SUBMIT_COMMENT_MUTATION = gql`\r\n    mutation($postId: String!, $body: String!){\r\n        createComment(postId: $postId, body: $body){\r\n            id\r\n            comments{\r\n                id\r\n                body\r\n                createdAt\r\n                username\r\n            }\r\n            commentCount\r\n        }\r\n    }\r\n`;\r\n\r\nconst FETCH_POST_QUERY = gql`\r\n    query ($postId: ID!){\r\n        getPost(postId: $postId){\r\n            id\r\n            body\r\n            createdAt\r\n            username\r\n            likeCount\r\n            likes{\r\n                username\r\n            }\r\n            commentCount\r\n            comments{\r\n                id\r\n                body\r\n                createdAt\r\n                username\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default SinglePost;","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport { Container } from 'semantic-ui-react';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\n\nimport {AuthProvider} from './context/auth';\nimport AuthRoute from './util/AuthRoute';\n\nimport MenuBar from './components/MenuBar';\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport SinglePost from './pages/SinglePost';\n\nfunction App() {\n  return (\n      <AuthProvider>\n        <Router>\n          <Container>\n            <MenuBar/>\n            <Route exact path=\"/\" component={Home} />\n   \n          {/*           \n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/register\" component={Register} />\n          */}\n            <AuthRoute exact path=\"/login\" component={Login} />\n            <AuthRoute exact path=\"/register\" component={Register} />\n\n            <Route exact path=\"/posts/:postId\" component={SinglePost} />\n       \n          </Container>\n        </Router>\n      </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport App from './App';\r\nimport ApolloClient from 'apollo-client';\r\nimport {InMemoryCache} from 'apollo-cache-inmemory';\r\nimport {createHttpLink} from 'apollo-link-http';\r\nimport {ApolloProvider} from '@apollo/react-hooks';\r\nimport {setContext} from 'apollo-link-context';\r\n\r\nconst httpLink = createHttpLink({\r\n    uri : '/graphql'\r\n});\r\n\r\nconst authLink = setContext(() => {\r\n\r\n    const token = localStorage.getItem('jwtToken');\r\n    return {\r\n        headers: {\r\n            Authorization: token ? `Bearer ${token}` : ''\r\n        }\r\n    }\r\n});\r\n\r\n\r\nconst client = new ApolloClient({\r\n    link: authLink.concat(httpLink),\r\n    //link: httpLink,\r\n    cache: new InMemoryCache()\r\n});\r\n\r\nexport default (\r\n    <ApolloProvider client={client}>\r\n        <App/>\r\n    </ApolloProvider>\r\n);","import ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloProvider from './ApolloProvider';\n\nReactDOM.render(ApolloProvider, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}